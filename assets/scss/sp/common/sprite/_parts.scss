/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$clock-name: 'clock';
$clock-x: 0px;
$clock-y: 0px;
$clock-offset-x: 0px;
$clock-offset-y: 0px;
$clock-width: 64px;
$clock-height: 64px;
$clock-total-width: 200px;
$clock-total-height: 132px;
$clock-image: '/images/sp/common/sprite/parts.png';
$clock: (0px, 0px, 0px, 0px, 64px, 64px, 200px, 132px, '/images/sp/common/sprite/parts.png', 'clock', );
$house-name: 'house';
$house-x: 68px;
$house-y: 0px;
$house-offset-x: -68px;
$house-offset-y: 0px;
$house-width: 64px;
$house-height: 64px;
$house-total-width: 200px;
$house-total-height: 132px;
$house-image: '/images/sp/common/sprite/parts.png';
$house: (68px, 0px, -68px, 0px, 64px, 64px, 200px, 132px, '/images/sp/common/sprite/parts.png', 'house', );
$img1-name: 'img1';
$img1-x: 136px;
$img1-y: 68px;
$img1-offset-x: -136px;
$img1-offset-y: -68px;
$img1-width: 50px;
$img1-height: 50px;
$img1-total-width: 200px;
$img1-total-height: 132px;
$img1-image: '/images/sp/common/sprite/parts.png';
$img1: (136px, 68px, -136px, -68px, 50px, 50px, 200px, 132px, '/images/sp/common/sprite/parts.png', 'img1', );
$placeholder-name: 'placeholder';
$placeholder-x: 0px;
$placeholder-y: 68px;
$placeholder-offset-x: 0px;
$placeholder-offset-y: -68px;
$placeholder-width: 64px;
$placeholder-height: 64px;
$placeholder-total-width: 200px;
$placeholder-total-height: 132px;
$placeholder-image: '/images/sp/common/sprite/parts.png';
$placeholder: (0px, 68px, 0px, -68px, 64px, 64px, 200px, 132px, '/images/sp/common/sprite/parts.png', 'placeholder', );
$star-name: 'star';
$star-x: 68px;
$star-y: 68px;
$star-offset-x: -68px;
$star-offset-y: -68px;
$star-width: 64px;
$star-height: 64px;
$star-total-width: 200px;
$star-total-height: 132px;
$star-image: '/images/sp/common/sprite/parts.png';
$star: (68px, 68px, -68px, -68px, 64px, 64px, 200px, 132px, '/images/sp/common/sprite/parts.png', 'star', );
$worldwide-name: 'worldwide';
$worldwide-x: 136px;
$worldwide-y: 0px;
$worldwide-offset-x: -136px;
$worldwide-offset-y: 0px;
$worldwide-width: 64px;
$worldwide-height: 64px;
$worldwide-total-width: 200px;
$worldwide-total-height: 132px;
$worldwide-image: '/images/sp/common/sprite/parts.png';
$worldwide: (136px, 0px, -136px, 0px, 64px, 64px, 200px, 132px, '/images/sp/common/sprite/parts.png', 'worldwide', );
$spritesheet-width: 200px;
$spritesheet-height: 132px;
$spritesheet-image: '/images/sp/common/sprite/parts.png';
$spritesheet-sprites: ($clock, $house, $img1, $placeholder, $star, $worldwide, );
$spritesheet: (200px, 132px, '/images/sp/common/sprite/parts.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
